#!/bin/sh -u

# Copyright (c) 2017 Masaki Waga
#
# This file is part of vmctl.
#
# Vmctl is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Vmctl is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with vmctl.  If not, see <http://www.gnu.org/licenses/>.
#
#****h* vmctl/vmctl
# NAME
#  vmctl
# SYNOPSIS
#  vmctl <command> <server_name> [<server_name>...]
# DESCRIPTION
#  A uniform interface to multiple virtual machines
#
# EXAMPLE
#  Assume `reimu' is the name of the virtual machine. 
#
#  > vmctl list
#  > vmctl start reimu
#  > vmctl stop reimu
#  > vmctl restart reimu
#  > vmctl status reimu
#
# PORTABILITY
#  We need jq <https://stedolan.github.io/jq/> and the commands to manipulates the instance.
#******

#****f* vmctl/die_user
# NAME
#  die_user
# SYNOPSIS
#  die_user <message>
# DESCRIPTION
#  Abort due to a user error
# EXAMPLE
#  die_user "Invalid argument"
#******
die_user() {
    echo "$1" > /dev/stderr
    exit 1
}

#****f* vmctl/die_impl
# NAME
#  die_impl
# SYNOPSIS
#  die_impl <message>
# DESCRIPTION
#  Abort due to an implementation error
# EXAMPLE
#  die_impl "Unimplemented"
#******
die_impl() {
    echo "$1" > /dev/stderr
    exit 2
}

#****f* vmctl/check_cmd
# NAME
#  check_cmd
# SYNOPSIS
#  check_cmd <command> <package-name>
# DESCRIPTION
#  check if a <command> is installed. If <package-name> is omitted, <command> is used as the <package-name>
# EXAMPLE
#  check_cmd aws aws-cli
#******
check_cmd() {
    if [ $# -lt 2 ]; then
        package_name=$1
    else
        package_name=$2
    fi
    command -v "$1" > /dev/null 2>&1 || die_user "$package_name is not installed!"
}

CONF_FILE=~/.vmctl.json

#****f* vmctl/exec_ec2
# NAME
#  exec_ec2
# SYNOPSIS
#  exec_ec2 <instance-name1> <instance-name2>...
# DESCRIPTION
#  the main execution for AWS EC2
# EXAMPLE
#  exec_ec2 reimu marisa chirno
#******
exec_ec2() {
    for server_name in "$@"; do
        jq -r --arg name "$server_name" '.[] | if (.name == $name) then .instance_id, if (.profile == null) then "default" else .profile end else empty end' $CONF_FILE
    done |
        xargs -n 2 |
        case $cmd in
            start)
                awk -v cmd_name=start-instances '{kind[$2]=kind[$2]" "$1}END{for (key in kind){printf "aws ec2 %s --profile %s --instance-ids %s\n", cmd_name, key, kind[key]}}' | 
                    sh
                ;;
            stop)
                awk -v cmd_name=stop-instances '{kind[$2]=kind[$2]" "$1}END{for (key in kind){printf "aws ec2 %s --profile %s --instance-ids %s\n", cmd_name, key, kind[key]}}' | 
                    sh
                ;;
            restart)
                awk -v cmd_name=reboot-instances '{kind[$2]=kind[$2]" "$1}END{for (key in kind){printf "aws ec2 %s --profile %s --instance-ids %s\n", cmd_name, key, kind[key]}}' | 
                    sh
                ;;
            ip)
                awk '{kind[$2]=kind[$2]" "$1}END{for (key in kind){printf "aws ec2 describe-instances --query \"Reservations[*].Instances[*].PublicIpAddress[]\" --profile %s --instance-ids %s\n", key, kind[key]}}' |
                    sh |
                    jq -r '.[]'
                ;;
            save)
                die_user 'EC2 insatance cannot be saved!'
                ;;
            status)
                awk '{kind[$2]=kind[$2]" "$1}END{for (key in kind){printf "aws ec2 describe-instances --query \"Reservations[*].Instances[*].State.Name[]\" --profile %s --instance-ids %s\n", key, kind[key]}}' | 
                    sh |
                    jq -r '.[]'
                ;;
            *)
                die_user "Unsupported command: $cmd for ec2"
        esac
}

#****f* vmctl/exec_gce
# NAME
#  exec_gce
# SYNOPSIS
#  exec_gce <instance-name1> <instance-name2>...
# DESCRIPTION
#  the main execution for AWS EC2
# EXAMPLE
#  exec_gce reimu marisa chirno
#******
exec_gce() {
    # We do not expand the variables because they are variables in AWK
    # shellcheck disable=SC2016
    AWK_COMMAND='{kind[$2,$3]=kind[$2,$3]" "$1}END{for (key in kind){split(key,sep,SUBSEP);printf "gcloud compute instances %s %s --zone %s --project %s\n", cmd_name, kind[key],sep[1],sep[2]}}'
    for server_name in "$@"; do
        jq -r --arg name "$server_name" '.[] | if (.name == $name) then .instance_id,.zone,.project else empty end' $CONF_FILE
    done |
        xargs -n 3 |
        case $cmd in
            start)
                awk -v cmd_name=start "$AWK_COMMAND" | sh
                ;;
            stop)
                awk -v cmd_name=stop "$AWK_COMMAND" | sh
                ;;
            restart)
                awk -v cmd_name=reset "$AWK_COMMAND" | sh
                ;;
            ip)
                awk -v cmd_name="describe --format='value(networkInterfaces[0].accessConfigs[0].natIP)'" '{printf "gcloud compute instances %s %s --zone %s --project %s\n", cmd_name, $1,$2,$3}' | sh
                ;;
            save)
                die_user 'GCE insatance cannot be saved!'
                ;;
            status)
                awk -v cmd_name="describe --format='value(status)'" '{printf "gcloud compute instances %s %s --zone %s --project %s\n", cmd_name, $1,$2,$3}' | sh
                ;;
            *)
                die_user "Unsupported command: $cmd for GCE"
        esac
}

#****f* vmctl/exec_virtual_box
# NAME
#  exec_virtual_box
# SYNOPSIS
#  exec_virtual_box <instance-name1> <instance-name2>...
# DESCRIPTION
#  the main execution for VirtualBox
# EXAMPLE
#  exec_virtual_box chen ran yukari
#******
exec_virtual_box() {
    for server_name in "$@"; do
        jq -r --arg name "$server_name" '.[] | if (.name == $name) then .instance_id else empty end' $CONF_FILE            
    done |
        case $cmd in
            start)
                xargs -I{} VBoxManage startvm {} --type headless
                ;;
            stop)
                xargs -I{} VBoxManage controlvm {} poweroff
                ;;
            restart)
                xargs -I{} VBoxManage controlvm {} reset
                ;;
            save)
                xargs -I{} VBoxManage controlvm {} savestate
                ;;
            status)
                xargs -I{} VBoxManage showvminfo {} | awk '/State:/ && sub("State: *","")'
                ;;
            *)
                die_user "Unsupported command: $cmd for virtual_box"
        esac
}

## When the first argument is `list', we show the instance names with instance types
if [ "$1" = list ]; then
    jq  -r '.[] | .name,.type' $CONF_FILE | sed 'N;s/\n/ /'
    exit
fi

usage_message="usage: vmctl <command> <server_name>"

## Main Procedure
[ $# -lt 2 ] && die_user "$usage_message"

cmd=$1
while [ $# -ge 2 ]; do
    shift
    server_name=$1
    server_type=$(jq -r --arg name "$server_name" '.[] | if (.name == $name) then .type else empty end' $CONF_FILE)

    if [ "$cmd" = help ]; then
        echo "$usage_message"
        return 0
    fi

    # check if the server exists
    [ -z "$server_type" ] && die_user "Server $server_name is not found!"

    ## dependency check
    check_cmd jq
    case $server_type in
        ec2)
            check_cmd aws aws-cli
            ;;
        gce)
            check_cmd gcloud
            ;;
        virtual_box)
            check_cmd VBoxManage VirtualBox
            ;;
    esac
    printf "%s %s\n" "$server_type" "$server_name"
done | # Here, we have a stream of <server_type> <server_name>
    awk '{kind[$1]=kind[$1]" "$2}END{for (key in kind){print key,kind[key]}}' | # Here, we have a stream of  <server_type> <server_name1>  <server_name2>...
    while read -r line; do
        type=${line%% *}
        names=${line#* }
        set -f
        case $type in
            ec2)
                # This word splitting is intentional.
                # shellcheck disable=SC2086
                exec_ec2 $names
                ;;
            gce)
                # This word splitting is intentional.
                # shellcheck disable=SC2086
                exec_gce $names
                ;;
            virtual_box)
                # This word splitting is intentional.
                # shellcheck disable=SC2086
                exec_virtual_box $names
                ;;
            *)
                die_user "Unsupported server type: $type"
        esac
    done
