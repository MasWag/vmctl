#!/bin/bash

# Copyright (c) 2017 Masaki Waga
#
# This file is part of vmctl.
#
# Vmctl is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Vmctl is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with vmctl.  If not, see <http://www.gnu.org/licenses/>.


#!@brief abort when user error
# @args message
die_user() {
    echo $1 > /dev/stderr
    exit 1
}
#!@brief abort when implementation error
# @args message
die_impl() {
    echo $1 > /dev/stderr
    exit 2
}
#!@brief check if a command is installed
# @args command package-name
# @notice If package-name is omitted, command is used as the package-name
check_cmd() {
    if (($# < 2)); then
        package_name=$1
    else
        package_name=$2
    fi
    which $1 > /dev/null 2>&1 || die_user "$package_name is not installed!"
}

conf_file=~/.vmctl.json

if [[ $1 == list ]]; then
    jq  -r '.[] | .name,.type' $conf_file | sed 'N;s/\n/ /'
    exit
fi

## Main Procedure
(($# < 2)) && die_user "usage: vmctl command server-name"

cmd=$1
server_name=$2
server_type=$(jq -r --arg name $server_name '.[] | if (.name == $name) then .type else empty end' $conf_file)

# check if the server exists
[[ -z $server_type ]] && die_user "Server $server_name is not found!"

## dependency check
check_cmd jq
case $server_type in
    ec2)
        check_cmd aws aws-cli
        ;;
    virtual_box)
        check_cmd VBoxManage VirtualBox
        ;;
esac

# extract the config of the operated server
jq -r --arg name $server_name '.[] | if (.name == $name) then . else empty end' $conf_file |
    case $server_type in
        ec2)
            jq -r '.instance_id,.profile' | xargs | awk 'NF>1{$3=$2;$2="--profile"}$1;' |
                case $cmd in
                    start)
                        xargs aws ec2 start-instances --instance-ids
                        ;;
                    stop)
                        xargs aws ec2 stop-instances --instance-ids
                        ;;
                    restart)
                        xargs aws ec2 reboot-instances --instance-ids
                        ;;
                    save)
                        echo 'EC2 insatance cannot be saved!'
                        ;;
                    status)
                        awk '{printf "aws ec2 describe-instances %s %s | jq -r \".Reservations[].Instances[] | if (.InstanceId ==\\\"%s\\\") then .State.Name else empty end\"\n",$2,$3,$1}' | bash
                        ;;
                    *)
                        die_user "Unsupported command: $cmd for ec2"
                esac
            ;;
        virtual_box)
            jq -r '.instance_id' |
                case $cmd in
                    start)
                        xargs -I{} VBoxManage startvm {} --type headless
                        ;;
                    stop)
                        xargs -I{} VBoxManage controlvm {} poweroff
                        ;;
                    restart)
                        xargs -I{} VBoxManage controlvm {} reset
                        ;;
                    save)
                        xargs -I{} VBoxManage controlvm {} savestate
                        ;;
                    status)
                        xargs -I{} VBoxManage showvminfo {} | awk '/State:/&&sub("State: *","")'
                        ;;
                    *)
                        die_user "Unsupported command: $cmd for virtual_box"
                esac
            ;;
        *)
            die_user "Unsupported server type: $server_type"
    esac
